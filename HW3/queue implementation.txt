In the question 3, I used two stacks to implement a queue. For the stack s1, I used it as the main stack to achieve the insert function. For the get_front function, I used stack s1 and s2. As we know stack is LIFO and queue is FIFO. So, in order to get the front element, I poped the whore elements in s1 into s2, and then pop the top element in s2, which is the front element of the queue. But in this function, we have to check whether s2 is empty, if s2 is not empty, we should just pop its element. But if s2 is, we should do the procedure mentioned above, which is push every s1's elements into s2 then pop the element at the top of s2. So this is my implemetation of queue using two stacks.

For the running time that we have already insert N elements in the queue, the running time of insert is O(1), because we don't have to check or move anything, just push the element into s1. For the get_front function, there are two kinds of probabilities. First, s2 is not empty, so we can just get the element by a single pop, the running time is O(1). Second, we have to pop all s1 elements and push them into s2 and then pop the top element, assuming the running time is 1 for every step per element, we need O(N) to pop and O(N) to push and O(1) to pop the top element, which is totally O(2N+1). So the worst case of get_front is O(N).